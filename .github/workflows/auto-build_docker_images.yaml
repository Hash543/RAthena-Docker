###########################################################################
#
# Project: RAthena-Docker
# Source: https://github.com/florentortiz/RAthena-Docker
# Created by: florentortiz, Mido-tw
#
# We highly encourage the community to share their ideas and contributions. 
# Your insights and improvements are valuable to us, and we welcome any form of 
# contribution, be it through issues, pull requests, or discussions.
# Let's build something great together!
#
###############################################################################

# This workflow will manage the build of our Docker images
name: Auto tags - RAthena-Docker - Build docker images for Ragnarok server

# Controls when the action will run.
on:
  # Workflow that will trigger on pull request on the "main" branch
  pull_request:
    types:
      - closed
    branches:
      - main

  # workflow_dispatch : Workflow runs when manually triggered using the UI or API.
  workflow_dispatch:
    # Inputs vars the workflow will use
    inputs:
      tag:
        # What will be show in the UI
        description: 'test tag'
        default: 'release/v1.0.10'
        required: true
        type: string

# Will allow the Github_token and the workflow to write in the checkout repository to update the docker-compose file
# VERY IMPORTANT as otherwise you will have "403 error" and even with a PAT in the url it will not work
# Can be put on the Job layer for better security, will test it later
permissions:
  contents: write

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  check-release-semver:
    runs-on: ubuntu-latest
    steps:
      - name: test TEMP
        env:
          TAG_SIM: ${{ inputs.tag }}
        run: echo "TAG_DOCKER=$(echo $TAG_SIM | cut -d'/' -f2 | sed 's/v//')" >> "$GITHUB_ENV"

      # Use of "github.ehead_ref" to define a specific env var for subsequent actions
      # We have to define the env variable in a "key=value" form, and put it in a specific Github var GITHUB_ENV
      # Here we can use the "github.head_ref" as we only trigger the workflow from a PR event
      #- name: Define Docker tag based on source branch name
      #  run: echo "TAG_DOCKER=$(echo ${{ github.head_ref }} | cut -d'/' -f2 | sed 's/v//')" >> "$GITHUB_ENV"

      - name: Check Semantic Versioning Format
        run: |
          # Regular expression to match Semantic Versioning format
          semver_regex='^[0-9]+\.[0-9]+\.[0-9]+$'

          # Check if the variable matches the SemVer regex define before
          if [[ $TAG_DOCKER =~ $semver_regex ]]; then
              echo "The variable $TAG_DOCKER is in Semantic Versioning format."
          else
              echo "The variable $TAG_DOCKER is NOT in Semantic Versioning format."
              exit 1
          fi

  fluxcp:
    runs-on: ubuntu-latest
    needs: [check-release-semver]
    steps:
      - name: Git Checkout
        uses: actions/checkout@v4

      - name: test TEMP
        env:
          TAG_SIM: ${{ inputs.tag }}
        run: echo "TAG_DOCKER=$(echo $TAG_SIM | cut -d'/' -f2 | sed 's/v//')" >> "$GITHUB_ENV"

      #- name: Define Docker tag based on source branch name
      #  run: echo "TAG_DOCKER=$(echo ${{ github.head_ref }} | cut -d'/' -f2 | sed 's/v//')" >> "$GITHUB_ENV"

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          # list of Docker images to use as base name for tags
          images: |
            ortizflorent/ragnarok-fluxcp          
          # generate Docker tags based on the following events/attributes
          tags: |
            type=semver,pattern={{version}},value=$TAG_DOCKER

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./fluxcp/
          file: ./fluxcp/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}

  # mysql:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Git Checkout
  #       uses: actions/checkout@v4

  #     - name: Docker meta
  #       id: meta
  #       uses: docker/metadata-action@v5
  #       with:
  #         # list of Docker images to use as base name for tags
  #         images: |
  #           ortizflorent/ragnarok-mysql          
  #         # generate Docker tags based on the following events/attributes
  #         tags: |
  #           type=semver,pattern={{version}}

  #     - name: Login to Docker Hub
  #       uses: docker/login-action@v3
  #       with:
  #         username: ${{ secrets.DOCKERHUB_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_TOKEN }}

  #     - name: Build and push
  #       uses: docker/build-push-action@v5
  #       with:
  #         context: ./mysql/
  #         file: ./mysql/Dockerfile
  #         push: true
  #         tags: ${{ steps.meta.outputs.tags }}

  # phpmyadmin:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Git Checkout
  #       uses: actions/checkout@v4

  #     - name: Docker meta
  #       id: meta
  #       uses: docker/metadata-action@v5
  #       with:
  #         # list of Docker images to use as base name for tags
  #         images: |
  #           ortizflorent/ragnarok-phpmyadmin          
  #         # generate Docker tags based on the following events/attributes
  #         tags: |
  #           type=semver,pattern={{version}}

  #     - name: Login to Docker Hub
  #       uses: docker/login-action@v3
  #       with:
  #         username: ${{ secrets.DOCKERHUB_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_TOKEN }}

  #     - name: Build and push
  #       uses: docker/build-push-action@v5
  #       with:
  #         context: ./phpmyadmin/
  #         file: ./phpmyadmin/Dockerfile
  #         push: true
  #         tags: ${{ steps.meta.outputs.tags }}

  # robrowser:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Git Checkout
  #       uses: actions/checkout@v4

  #     - name: Docker meta
  #       id: meta
  #       uses: docker/metadata-action@v5
  #       with:
  #         # list of Docker images to use as base name for tags
  #         images: |
  #           ortizflorent/ragnarok-robrowser          
  #         # generate Docker tags based on the following events/attributes
  #         tags: |
  #           type=semver,pattern={{version}}

  #     - name: Login to Docker Hub
  #       uses: docker/login-action@v3
  #       with:
  #         username: ${{ secrets.DOCKERHUB_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_TOKEN }}

  #     - name: Build and push
  #       uses: docker/build-push-action@v5
  #       with:
  #         context: ./robrowser/
  #         file: ./robrowser/Dockerfile
  #         push: true
  #         tags: ${{ steps.meta.outputs.tags }}

  # server:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Git Checkout
  #       uses: actions/checkout@v4

  #     - name: Docker meta
  #       id: meta
  #       uses: docker/metadata-action@v5
  #       with:
  #         # list of Docker images to use as base name for tags
  #         images: |
  #           ortizflorent/ragnarok-server        
  #         # generate Docker tags based on the following events/attributes
  #         tags: |
  #           type=semver,pattern={{version}}

  #     - name: Login to Docker Hub
  #       uses: docker/login-action@v3
  #       with:
  #         username: ${{ secrets.DOCKERHUB_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_TOKEN }}

  #     - name: Build and push
  #       uses: docker/build-push-action@v5
  #       with:
  #         context: ./server/
  #         file: ./server/Dockerfile
  #         push: true
  #         tags: ${{ steps.meta.outputs.tags }}

  # wsproxy:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Git Checkout
  #       uses: actions/checkout@v4

  #     - name: Docker meta
  #       id: meta
  #       uses: docker/metadata-action@v5
  #       with:
  #         # list of Docker images to use as base name for tags
  #         images: |
  #           ortizflorent/ragnarok-wsproxy          
  #         # generate Docker tags based on the following events/attributes
  #         tags: |
  #           type=semver,pattern={{version}}

  #     - name: Login to Docker Hub
  #       uses: docker/login-action@v3
  #       with:
  #         username: ${{ secrets.DOCKERHUB_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_TOKEN }}

  #     - name: Build and push
  #       uses: docker/build-push-action@v5
  #       with:
  #         context: ./wsproxy/ 
  #         file: ./wsproxy/Dockerfile
  #         push: true
  #         tags: ${{ steps.meta.outputs.tags }}

  docker-compose:
    runs-on: ubuntu-latest
    #needs: [fluxcp, mysql, phpmyadmin, robrowser, server, wsproxy]
    steps:
      - name: Git Checkout
        uses: actions/checkout@v4
        with:
          ref: 'main' # We had to put this as we are triggering with a tag event, so HEAD was detached. To be verified with PR event

      - name: test TEMP
        env:
          TAG_SIM: ${{ inputs.tag }}
        run: echo "TAG_DOCKER=$(echo $TAG_SIM | cut -d'/' -f2 | sed 's/v//')" >> "$GITHUB_ENV"

      #- name: Define Docker tag based on source branch name
      #  run: echo "TAG_DOCKER=$(echo ${{ github.head_ref }} | cut -d'/' -f2 | sed 's/v//')" >> "$GITHUB_ENV"

      - name: Docker-compose update
        run: sed -Ei "s/[0-9]+\.[0-9]+\.[0-9]+/${TAG_DOCKER}/g" docker-compose.yml

      - name: Docker-compose show
        run: cat docker-compose.yml

  #     - name: Git push for docker-compose
  #       run: |
  #         git config user.name github-actions
  #         git config user.email github-actions@github.com
  #         git add docker-compose.yml
  #         git commit -m "ci: update image version ${TAG_DOCKER} - generated by CI"
  #         git push

  create-tag-release:
    runs-on: ubuntu-latest
    needs: [docker-compose]
    steps:
      - name: Git Checkout
        uses: actions/checkout@v4

      - name: test TEMP
        env:
          TAG_SIM: ${{ inputs.tag }}
        run: echo "TAG_DOCKER=$(echo $TAG_SIM | cut -d'/' -f2 | sed 's/v//')" >> "$GITHUB_ENV"

      #- name: Define Docker tag based on source branch name
      #  run: echo "TAG_DOCKER=$(echo ${{ github.head_ref }} | cut -d'/' -f2 | sed 's/v//')" >> "$GITHUB_ENV"

      # By default it will use the "X.X.X" of "release/X.X.X"
      - name: Bump version and push tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          custom_tag: "$TAG_DOCKER"

      - name: Create Release for RAthena-Docker
        uses: ncipollo/release-action@v1.13.0
        with:
          tag: ${{ steps.tag_version.outputs.new_tag }}
          generateReleaseNotes: true
          makeLatest: true
          name: "Ragnarok Docker ${{ steps.tag_version.outputs.new_tag }}"
            